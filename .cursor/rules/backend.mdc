---
description: "Backend development rules for Expressio - Bun server, CLI tools, and translation services"
globs:
  - "packages/expressio/api/**"
  - "packages/expressio/lib/**"
  - "packages/expressio/service.ts"
  - "packages/bunchy/**"
  - "packages/enola/**"
  - "packages/common/lib/**"
alwaysApply: true
---

# Expressio Backend Development Rules

Backend development guidelines for the Expressio AI-powered i18n tooling project.

## Tech Stack

- **Runtime**: Bun (modern JavaScript runtime)
- **Server**: Bun.serve() with custom routing - NOT Express.js
- **Architecture**: Service-oriented with dependency injection
- **CLI**: yargs-based command interface
- **Logging**: Custom isomorphic logger service
- **Config**: RC file-based configuration management

## Project Structure (Backend Focus)

```
packages/
├── expressio/
│   ├── api/           # REST API endpoints
│   ├── lib/           # Core business logic
│   └── service.ts     # CLI entry point
├── bunchy/            # Development tooling
├── common/            # Shared backend utilities
└── enola/             # Translation service wrapper
```

## Common Anti-patterns

❌ **Don't do:**
- Use Express.js patterns - this is Bun with custom routing
- Block the main thread with synchronous file operations
- Store sensitive API keys in workspace files
- Skip input validation on user-provided paths
- Ignore WebSocket connection cleanup

✅ **Do:**
- Use Bun.serve() and native Web APIs (Request/Response)
- Leverage Bun's fast file I/O with async operations
- Use environment variables or rc config file for sensitive configuration
- Validate and sanitize all file paths and user inputs
- Use the websocket protocol
- Use structured logging with relevant context
